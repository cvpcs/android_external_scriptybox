#!/system/xbin/bash
#
# Sapphire ScriptyBox Script
# The mother-load of all scripts O.O
#
# This script is designed to act similarly to busybox in how it
# can have symlinks of it made and whatnot to run the commands.
#
# Copyright (C) 2010 Austen Dicken (cvpcs)
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

# name of this script
SCRIPT_NAME=scriptybox

# etc directories
SYSTEM_ETC=/system/etc
SCRIPT_ETC="${SYSTEM_ETC}/scriptybox"

# location of file downloads
FILES_URL="$(getprop ro.cvpcs.scriptybox.files_url)"

# first assume we're using a symbolic link
CMD=$(basename $0)
ARG=$@

# declare our internal commands
function __adblock () {
###############################################################################
# function name: __adblock
# parameters: $1 - (on|off): determine if ad blocking turns on or off
# returns: void
# description:
#     uses the phone's hostfile to block ads
#
	hostfile_local="${SCRIPT_ETC}/hosts.local"
	hostfile_adblock="${SCRIPT_ETC}/hosts.adblock"

	if busybox [ $# == 0 ] ; then
		__adblock_help
	else
		case $1 in
			on)
				__sysrw > /dev/null
				busybox echo -n "Enabling ad blocking ... "
				busybox cat "${hostfile_local}" > /system/etc/hosts
				busybox cat "${hostfile_adblock}" >> /system/etc/hosts
				busybox echo "done"
				__sysro > /dev/null
			;;
			off)
				__sysrw > /dev/null
				busybox echo -n "Disabling ad blocking ... "
				busybox cat "${hostfile_local}" > /system/etc/hosts
				busybox echo "done"
				__sysro > /dev/null
			;;
			*)
				__adblock_help
			;;
		esac
	fi
}

function __adblock_help () {
	busybox echo "Usage:"
	busybox echo "    adblock [on|off]"
	busybox echo ""
	busybox echo "Turns ad blocking for the system on or off"
}

function __camsounds () {
###############################################################################
# function name: __camsounds
# parameters: $1 - (on|off): determine if camera sound turns on or off
# returns: void
# description:
#     rename camera sound files to disable the video record and camera click
#     sounds
#
	sound_clk="/system/media/audio/ui/camera_click.ogg"
	sound_rec="/system/media/audio/ui/VideoRecord.ogg"

	if busybox [ $# == 0 ] ; then
		__camsounds_help
	else
		case $1 in
			on)
				__sysrw > /dev/null
				busybox echo -n "Enabling camera audio ... "
				if busybox [ -e "${sound_clk}.bak" ] ; then busybox mv "${sound_clk}.bak" "${sound_clk}"; fi
				if busybox [ -e "${sound_rec}.bak" ] ; then busybox mv "${sound_rec}.bak" "${sound_rec}"; fi
				busybox echo "done"
				__sysro > /dev/null
				;;
			off)
				__sysrw > /dev/null
				busybox echo -n "Disabling camera audio ... "
				if busybox [ -e "${sound_clk}" ] ; then busybox mv "${sound_clk}" "${sound_clk}.bak"; fi
				if busybox [ -e "${sound_rec}" ] ; then busybox mv "${sound_rec}" "${sound_rec}.bak"; fi
				busybox echo "done"
				__sysro > /dev/null
				;;
			*)
				__camsounds_help
				;;
		esac
	fi
}

function __camsounds_help () {
	busybox echo "Usage:"
	busybox echo "    camsounds [on|off]"
	busybox echo ""
	busybox echo "Turns the camera sounds (shutter and video cam) on or off"
}

function __compcache () {
###############################################################################
# function name: __compcache
# parameters: $1 - (on|off): determine if compcache turns on or off
# returns: void
# description:
#     turns on compcache ramzswap module and enables it (or shuts of and
#     disables it)
#
	if busybox [ $# == 0 ] ; then
		__compcache_help
	else
                rzswap_mod=ramzswap
                rzswap_size=20480
                rzswap_file=/dev/block/ramzswap0
                rzctrl=$(busybox which rzscontrol 2>/dev/null)

		if busybox [ -z "${rzctrl}" ] ; then
		        busybox echo "FATAL ERROR: Could not find rzscontrol applicaiton"
		        return
		fi

		# sanity check 2: does our module exist?
		if busybox [ -z "$(busybox find /system/lib/modules -name *${rzswap_mod}* 2>/dev/null)" ] ; then
		        # no module, maybe the ram device just exists?

		        if busybox [ ! -b "${rzswap_file}" ] ; then
		                busybox echo "FATAL ERROR: System does not support compcache"
		                return
		        fi
		fi

		case $1 in
			on)
		               if busybox [ -z "$(busybox lsmod | busybox grep ${rzswap_mod})" ] ; then
		                        busybox echo -n "Loading ramzswap module ... "

		                        if ! busybox modprobe "${rzswap_mod}" "disksize_kb=${rzswap_size}" ; then
		                                busybox echo "FAIL"
		                                return
		                        fi

					busybox echo "done"
		                fi

		                if busybox [ -z "$(busybox grep ${rzswap_file} /proc/swaps)" ] ; then
					busybox echo -n "Enabling swap ... "
		                        busybox swapon "${rzswap_file}"
					busybox echo "done"
		                fi

				busybox echo "Compcache has been enabled"
				;;
			off)
        		        if busybox [ ! -z "$(busybox grep ${rzswap_file} /proc/swaps)" ] ; then
		                        busybox echo -n "Disabling swap ... "
		                        busybox swapoff "${rzswap_file}"
					busybox echo "done"

					busybox echo -n "Resetting ramzswap ... "
		                        "${rzctrl}" "${rzswap_file}" --reset
					busybox echo "done"
		                fi

		                if busybox [ ! -z "$(busybox lsmod | busybox grep ${rzswap_mod})" ] ; then
		                        busybox echo -n "Unloading ramzswap module ... "
		                        busybox modprobe -r "${rzswap_mod}"
					busybox echo "done"
		                fi

				busybox echo "Compcache has been disabled"
				;;
			stats)
				if busybox [ -b "${rzswap_file}" ] ; then
					"${rzctrl}" "${rzswap_file}" --stats
				else
					busybox echo "Compcache does not appear to be enabled"
				fi
				;;
			*)
				__compcache_help
				;;
		esac
	fi
}

function __compcache_help () {
	busybox echo "Usage:"
	busybox echo "    compcache [on|off|stats]"
	busybox echo ""
	busybox echo "Turns compcache (in-RAM swap) on or off"
}

function __cpuinfo () {
###############################################################################
# function name: __cpuinfo
# parameters: void
# returns: void
# description:
#    displays the information about the processor
#
	if busybox [ $# -gt 0 ] ; then
		__cpuinfo_help
	else
		if busybox [ -e /proc/cpuinfo ] ; then
			busybox cat /proc/cpuinfo
		else
			busybox echo "Cpuinfo not supported by kernel"
		fi
	fi
}

function __cpuinfo_help () {
	busybox echo "Usage:"
	busybox echo "    cpuinfo"
	busybox echo ""
	busybox echo "Displays all of the CPU information for the system"
}

function __cwiid () {
###############################################################################
# function name: __cwiid
# parameters: $1 - (on|off|status): determine if compcache turns on or off or
#                                   displays a status
# returns: void
# description:
#     turns on (or off) cwiid wiimote connectivity, or displays the status
#     of the daemon
#
	if busybox [ $# == 0 ] ; then
		__cwiid_help
	else
		cwiictrl="$(busybox which wminput 2>/dev/null)"
		cwiiconf="$(getprop persist.sys.gem.cwiid.conf)"

		if busybox [ -z "${cwiictrl}" ] ; then
		        busybox echo "FATAL ERROR: Could not find wminput applicaiton"
		        return
		fi

		if busybox [ -z "${cwiiconf}" ] ; then
			cwiiconf="buttons"
		fi

		case $1 in
			on)
				if busybox [ ! -z "$(busybox pgrep wminput 2>/dev/null)" ] ; then
					busybox echo "CWiiD daemon is already running."
				else
					busybox echo -n "Starting CWiiD daemon ... "

					"${cwiictrl}" -c "${cwiiconf}" -d 2>/dev/null &

					busybox sleep 2s

					if busybox [ ! -z "$(busybox pgrep wminput 2>/dev/null)" ] ; then
						busybox echo "done"
					else
						busybox echo "ERROR"
					fi
				fi
				;;
			off)
				busybox echo -n "Killing CWiiD Daemon ... "

				i=0
				while busybox [ ! -z "$(busybox pgrep wminput 2>/dev/null)" ] ; do
					busybox killall wminput 2>/dev/null
					busybox sleep 2s

					if [ ${i} -lt 5 ] ; then
						i=$(busybox expr ${i} + 1)
					else
						break
					fi
				done

				if busybox [ -z "$(busybox pgrep wminput 2>/dev/null)" ] ; then
					busybox echo "done"
				else
					busybox echo "ERROR"
				fi
				;;
			status)
				if busybox [ -z "$(busybox pgrep wminput 2>/dev/null)" ] ; then
					busybox echo "CWiiD daemon is currently not running."
				else
					busybox echo "CWiiD daemon is currently running."
				fi
				busybox echo "It's state is: [$(getprop service.gem.cwiid.status)]"
				;;
			*)
				__cwiid_help
				;;
		esac
	fi
}

function __cwiid_help () {
	busybox echo "Usage:"
	busybox echo "    cwiid [on|off|status]"
	busybox echo ""
	busybox echo "Turns CWiiD (WiiMote Connectivity) on or off, or displays status"
}

function __freemem () {
###############################################################################
# function name: __freemem
# parameters: $1 - (50mb|75mb|100mb|default): how much ram to keep free
#             $2 - (i_understand_how_stupid_this_is_and_choose_to_use_it_anyway): verification of use
# returns: void
# description:
#     set up the memfree task killer to leave a certain amount of ram free
#
	if busybox [ $# == 0 ] ; then
		__freemem_help
	else
		if busybox [ "$2" == "i_understand_and_choose_to_use_it_anyway" ] ; then
			case $1 in
				50mb)
					# 10mb,15mb,25mb,30mb,40mb,50mb
					__freemem_helper 2560 3840 6400 7680 10240 12800
					;;
				75mb)
					# 10mb,15mb,25mb,40mb,50mb,75mb
					__freemem_helper 2560 3840 6400 10240 12800 19200
					;;
				100mb)
					# 10mb,15mb,25mb,50mb,70mb,100mb
					__freemem_helper 2560 3840 6400 12800 12800 25600
					;;
				default)
					# 6mb,8mb,16mb,20mb,22mb,24mb (default)
					__freemem_helper 1536 2048 4096 5120 5632 6144
					;;
				*)
					__freemem_help
					;;
			esac
		else
			__freemem_warning
		fi
	fi
}

function __freemem_warning () {
	busybox echo "!!!!!!!!!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!!!!!!!"
	busybox echo ""
	busybox echo "Freemem is a script that tells the native task killer for"
	busybox echo "Android to keep large blocks of memory available at all"
	busybox echo "times.  This is poor in practice as unused memory is"
	busybox echo "wasted memory.  It is best to use the default settings"
	busybox echo "to allow the system to make the most out of the memory"
	busybox echo "it has available."
	busybox echo ""
	busybox echo "If you wish to ignore this warning, you can still run"
	busybox echo "this command by adding the following to the end of the"
	busybox echo "command:"
	busybox echo "  i_understand_and_choose_to_use_it_anyway"
	busybox echo ""
	busybox echo "Example:"
	busybox echo "  freemem 50mb i_understand_and_choose_to_use_it_anyway"
}

function __freemem_help () {
	busybox echo "Usage:"
	busybox echo "    freemem [50mb|75mb|100mb|default]"
	busybox echo ""
	busybox echo "Configures the system to enusre that at least a given"
	busybox echo "amount of RAM is always available"
}

function __freemem_helper () {
###############################################################################
# function name: __freemem_helper
# parameters: $1,$2,$3,$4,$5,$6 - ([0-9]+): memory values to kill at
# returns: void
# description:
#     helper function to push memkill values to the low memory killer
#
	if busybox [ $# == 6 ] ; then
		busybox echo -n "Setting memkiller to keep $(busybox expr $6 \* 4 / 1024)mb of RAM free ... "
		busybox echo "$1,$2,$3,$4,$5,$6" > /sys/module/lowmemorykiller/parameters/minfree
		busybox echo "done"
		busybox echo ""
		busybox echo "WARNING: Increasing auto-task killing may have adverse effects"
		busybox echo "         on the system.  If you experience unexpected issues,"
		busybox echo "         try reducing the amount of memory kept free."
	else
		busybox echo "Unable to set memkiller ... "
	fi
}

function __halt () {
###############################################################################
# function name: __halt
# parameters: void
# returns: void
# description:
#     shuts down the phone to a power-off state (no reboot)
#
	if busybox [ $# -gt 0 ] ; then
		__halt_help
	else
		busybox echo "Powering down ... "
		reboot -p
	fi
}

function __halt_help () {
	busybox echo "Usage:"
	busybox echo "    halt"
	busybox echo ""
	busybox echo "Powers off the phone"
}

function __meminfo () {
###############################################################################
# function name: __meminfo
# parameters: void
# returns: void
# description:
#     prints out info about the memory on the system
#
	if busybox [ $# -gt 0 ] ; then
		__meminfo_help
	else
		if busybox [ -e /proc/meminfo ] ; then
			busybox cat /proc/meminfo
		else
			busybox echo "Meminfo not supported by kernel"
		fi
	fi
}

function __meminfo_help () {
	busybox echo "Usage:"
	busybox echo "    meminfo"
	busybox echo ""
	busybox echo "Displays all of the memory information for the system"
}

function __mtdinfo () {
###############################################################################
# function name: __mtdinfo
# parameters: void
# returns: void
# description:
#     prints out info about the memory partitions of the system
#
	if busybox [ $# -gt 0 ] ; then
		__mtdinfo_help
	else
		if busybox [ -e /proc/mtd ] ; then
			busybox cat /proc/mtd
		else
			busybox echo "Mtdinfo not supported by kernel"
		fi
	fi
}

function __mtdinfo_help () {
	busybox echo "Usage:"
	busybox echo "    mtdinfo"
	busybox echo ""
	busybox echo "Displays all of the internal partitions for the system"
}

function __rmapk () {
###############################################################################
# function name: __rmapk
# parameters: $1 - {name}: name of the apk to remove
# returns: void
# description:
#     removes an apk from the system app folder
#
	if busybox [ $# == 0 ] ; then
		__rmapk_help
	else
		case $1 in
			alarm)
				__rmapk_helper \
					"Alarm Clock" \
					"/system/app/AlarmClock.apk"
				;;
			browser)
				__rmapk_helper \
					"Browser" \
					"/system/app/Browser.apk"
				;;
			calc)
				__rmapk_helper \
					"Calculator" \
					"/system/app/Calculator.apk"
				;;
			carhome)
				__rmapk_helper \
					"Car Home" \
					"/system/app/CarHomeGoogle.apk" \
					"/system/app/CarHomeLauncher.apk"
				;;
			corpcal)
				__rmapk_helper \
					"Corporate Calendar" \
					"/system/app/CorpCal.apk"
				;;
			deskclock)
				__rmapk_helper \
					"Desk Clock" \
					"/system/app/DeskClock.apk"
				;;
			devtools)
				__rmapk_helper \
					"Dev Tools" \
					"/system/app/Development.apk"
				;;
			#dock)
			#	__rmapk_helper \
			#		"Dock" \
			#		"/system/app/Dock.apk"
			#	;;
			email)
				__rmapk_helper \
					"Email" \
					"/system/app/Email.apk"
				;;
			genie)
				__rmapk_helper \
					"News and Weather" \
					"/system/app/GenieWidget.apk"
				;;
			lwps)
				__rmapk_helper \
					"Live Wallpapers" \
					"/system/app/LiveWallpapers.apk" \
					"/system/app/MagicSmokeWallpapers.apk" \
					"/system/app/VisualizationWallpapers.apk"
				;;
			mms)
				__rmapk_helper \
					"MMS" \
					"/system/app/Mms.apk"
				;;
			mp3)
				__rmapk_helper \
					"Amazon MP3" \
					"/system/app/com.amazon.mp3.apk"
				;;
			music)
				__rmapk_helper \
					"Music" \
					"/system/app/Music.apk"
				;;
			qoffice)
				__rmapk_helper \
					"QuickOffice" \
					"/system/app/SholesQuickOffice.apk"
				;;
			search)
				__rmapk_helper \
					"Google Search" \
					"/system/app/GoogleQuickSearchBox.apk"
				;;
			spare)
				__rmapk_helper \
					"Spare Parts" \
					"/system/app/SpareParts.apk"
				;;
			speech)
				__rmapk_helper \
					"Speech Recorder" \
					"/system/app/SpeechRecorder.apk"
				;;
			tips)
				__rmapk_helper \
					"Tips" \
					"/system/app/Protips.apk"
				;;
			vvm)
				__rmapk_helper \
					"Visual VM" \
					"/system/app/VVMStub.apk"
				;;
			*)
				__rmapk_help
				;;
		esac
	fi
}

function __rmapk_help () {
	busybox echo "Usage:"
	busybox echo "     rmapk [alarm|browser|calc|carhome|corpcal|"
	busybox echo "            deskclock|devtools|email|genie|lwps|mms|"
	busybox echo "            mp3|music|qoffice|search|spare|speech|tips|"
	busybox echo "            vvm]" # dock
	busybox echo ""
	busybox echo "Removes applications that may be unwanted on some"
	busybox echo "systems.  The Applications are:"
	busybox echo "     alarm - Alarm Clock"
	busybox echo "     browser - Stock browser"
	busybox echo "     calc - Stock calculator"
	busybox echo "     carhome - Stock car home"
	busybox echo "     corpcal - Corporate Calendar"
	busybox echo "     deskclock - Desk Clock"
	busybox echo "     devtools - Development Tools"
	#busybox echo "     dock - Dock"
	busybox echo "     email - Stock email"
	busybox echo "     genie - News and Weather"
	busybox echo "     lwps - Live Wallpapers"
	busybox echo "     mms - Stock MMS"
	busybox echo "     mp3 - Amazon MP3"
	busybox echo "     music - Music"
	busybox echo "     qoffice - QuickOffice"
	busybox echo "     search - Google Search"
	busybox echo "     spare - Spare Parts"
	busybox echo "     speech - Speech Recorder"
	busybox echo "     tips - Tips"
	busybox echo "     vvm - Visual VM"
}

function __rmapk_helper () {
###############################################################################
# function name: __rmapk_helper
# parameters: $1 - {name}: name of the app being removed (used for display)
#             $2[,..] - {file}: files to be removed
# returns: void
# description:
#     helper function that performs the removal of the specified app
#
	app_name=$1; shift 1
	app_files=$@

	if busybox [ ! -z "${app_name}" ] ; then
		busybox echo "Removing application: ${app_name}"

		__sysrw > /dev/null

		for apk in ${app_files}; do
			busybox echo -n "  Removing file: ${apk} ... "

			if busybox [ -e "${apk}" ] ; then
				# i am basenaming this to make sure nothing bad happens
				busybox rm "/system/app/$(busybox basename ${apk})"
				busybox echo "done"
			else
				busybox echo "already removed"
			fi
		done

		__sysro > /dev/null
	fi
}

function __swapinfo () {
###############################################################################
# function name: __swapinfo
# parameters: void
# returns: void
# description:
#     displays info about any swap space on the device
#
	if busybox [ $# -gt 0 ] ; then
		__swapinfo_help
	else
                if busybox [ -e /proc/swaps ] ; then
			busybox cat /proc/swaps
		else
			busybox echo "Swapinfo not supported by kernel"
		fi
	fi
}

function __swapinfo_help () {
	busybox echo "Usage:"
	busybox echo "    swapinfo"
	busybox echo ""
	busybox echo "Displays all of the swap information for a system"
}

function __switchapk () {
###############################################################################
# function name: __switchapk
# parameters: $1 - {name}: name of the apk to switch
# returns: void
# description:
#     downloads and swaps apks from the sapphire host server
#
	switchapk_files_url="${FILES_URL}/switchapk"

	if busybox [ $# != 2 ] ; then
		__switchapk_help
	else
		case $1 in
			clock)
				case $2 in
					alarm)
						__switchapk_helper \
							"Clock" "2.2 Alarm Clock" \
							"AlarmClock.apk" "AlarmClock.apk" \
							"DeskClock.apk"
						;;
					desk)
						__switchapk_helper \
							"Clock" "2.2 Desk Clock" \
							"DeskClock.apk" "DeskClock.apk" \
							"AlarmClock.apk"
						;;
					*)
						busybox echo "Did not understand [$@]"
						;;
				esac
				;;
			launcher)
				case $2 in
					adw)
						__switchapk_helper \
							"Launcher" "ADW Launcher" \
							"ADWLauncher.apk" "Launcher2.apk" \
							"Launcher2.apk"
						;;
					stock)
						__switchapk_helper \
							"Launcher" "2.2 Stock Launcher" \
							"Launcher2.apk" "Launcher2.apk" \
							"Launcher2.apk"
						;;
					*)
						busybox echo "Did not understand [$@]"
						;;
				esac
				;;
			music)
				case $2 in
					eliotstocker)
						__switchapk_helper \
							"Music" "Eliot Stocker Music Overhaul" \
							"EliotStockerMusic.apk" "Music.apk" \
							"Music.apk"
						;;
					milestone)
						__switchapk_helper \
							"Music" "Milestone Music" \
							"MilestoneMusic.apk" "Music.apk" \
							"Music.apk"
						;;
					stock)
						__switchapk_helper \
							"Music" "2.2 Stock Music" \
							"Music.apk" "Music.apk" \
							"Music.apk"
						;;
					*)
						busybox echo "Did not understand [$@]"
						;;
				esac
				;;
			phone)
				case $2 in
					cytown)
						__switchapk_helper \
							"Phone" "Cytown Phone Overhaul" \
							"CytownPhone.apk" "Phone.apk" \
							"Phone.apk"
						;;
					stock)
						__switchapk_helper \
							"Phone" "2.2 Stock Phone" \
							"Phone.apk" "Phone.apk" \
							"Phone.apk"
						;;
					*)
						busybox echo "Did not understand [$@]"
						;;
				esac
				;;
			*)
				__switchapk_help
				;;
		esac
	fi
}

function __switchapk_help {
	busybox echo "Usage:"
	busybox echo "    switchapk [application selection]"
	busybox echo ""
	busybox echo "Switches default applications for the following:"
	busybox echo "    clock [alarm|desk] - either the AlarmClock or DeskClock app"
	busybox echo "    launcher [adw|stock] - either ADW or Stock Launcher"
	busybox echo "    music [eliotstocker|milestone|stock] - either the Eliot Stocker,"
	busybox echo "              Milestone or stock 2.2 Music app"
	busybox echo "    phone [cytown|stock] - either the Cytown or Stock Phone"
}

function __switchapk_helper () {
###############################################################################
# function name: __switchapk_helper
# parameters: $1 - {old_app_name}: name of the apk being replaced
#             $2 - {new_app_name}: name of the new apk
#             $3 - {new_app_file}: name of the new file
#             $4 - {copy_to_file}: file name to copy to
#             $@ - {delete_files}: files to delete (old files)
# returns: 0: success
#          1: failure
# description:
#     downloads and swaps apks from the sapphire host server
#
	if busybox [ $# -gt 4 ] ; then
		old_app_name="$1"
		new_app_name="$2"
		new_app_file="$3"
		copy_to_file="$4"; shift 4
		delete_files="$@"

		busybox echo "Replacing ${old_app_name} with ${new_app_name} ..."

		busybox echo "  Downloading required files:"
		busybox echo -n "    ${new_app_file} ... "
		busybox wget -q -O "/cache/${new_app_file}" "${switchapk_files_url}/${new_app_file}"
		if busybox [ -e "/cache/${new_app_file}" ] ; then
			busybox echo "done"

			busybox echo -n "    ${new_app_file}.chksum ... "
			busybox wget -q -O "/cache/${new_app_file}.chksum" "${switchapk_files_url}/${new_app_file}.chksum"
			if busybox [ -e "/cache/${new_app_file}.chksum" ] ; then
				busybox echo "done"

				busybox echo "  Verifying download:"

				chksum_passed="1"

				for i in md5 sha1 sha256 sha512; do
					busybox echo -n "    Verifying ${i} checksum ... "
					if busybox echo "$(busybox grep "${i}" "/cache/${new_app_file}.chksum" | busybox awk '{print $2 "  " $3}')" | busybox "${i}sum" -c -s ; then
						busybox echo "pass"
					else
						busybox echo "FAIL"
						chksum_passed="0"
					fi
				done

				if busybox [ "$chksum_passed" -eq "1" ] ; then
					busybox echo -n "  Switching apks ... ";

					__sysrw > /dev/null

					for old_app_file in ${delete_files}; do
						if busybox [ -e "/system/app/${old_app_file}" ] ; then
							busybox rm "/system/app/${old_app_file}"
						fi
					done

					if busybox [ -e "/system/app/${copy_to_file}" ] ; then
						busybox rm "/system/app/${copy_to_file}"
					fi

					busybox cp "/cache/${new_app_file}" "/system/app/${copy_to_file}"
					busybox chown 0.0 "/system/app/${copy_to_file}"
					busybox chmod 644 "/system/app/${copy_to_file}"

					__sysro > /dev/null

					busybox echo "done"
				else
					busybox echo "  There was an error verifying your downloads"
					busybox echo "  Switch ABORTED"
				fi

				busybox echo -n "  Cleaning up ... "
				busybox rm "/cache/${new_app_file}"
				busybox rm "/cache/${new_app_file}.chksum"
				busybox echo "done"
			else
				busybox echo "FAILED"
			fi
		else
			busybox echo "FAILED"
		fi
	fi

}

function __sysro () {
###############################################################################
# function name: __sysro
# parameters: void
# returns: void
# description:
#     remounts the /system partition read-only
#
	if busybox [ $# -gt 0 ] ; then
		__sysro_help
	else
		busybox echo -n "Remounting /system read-only ... "

		# i'm throwing the sleeps in there in hopes that it will fix
		# the problems i'm having :S
		sleep 2s

		sync
		busybox mount -o remount,ro /system

		busybox echo "done"
	fi
}

function __sysro_help () {
	busybox echo "Usage:"
	busybox echo "    sysro"
	busybox echo ""
	busybox echo "Mounts the /system partition read-only"
}

function __sysrw () {
###############################################################################
# function name: __sysrw
# parameters: void
# returns: void
# description:
#     remounts the /system partition read-write
#
	if busybox [ $# -gt 0 ] ; then
		__sysrw_help
	else
		busybox echo -n "Remounting /system read-write ... "
		busybox mount -o remount,rw /system
		busybox echo "done"
	fi
}

function __sysrw_help () {
	busybox echo "Usage:"
	busybox echo "    sysrw"
	busybox echo ""
	busybox echo "Mounts the /system partition read/write"
}

function __zipalign_apks () {
###############################################################################
# function name: __zipalign_apks
# parameters: void
# returns: void
# description:
#     cycles through all of the apks on your system and zipaligns them if they
#     are not already
#
	if busybox [ $# -gt 0 ] ; then
		__zipalign_apks_help
	else
		# find our apks
		sys_apks=$(busybox find /system -name '*.apk')
		dat_apks=$(busybox find /data -name '*.apk')

		# zipalign apks
		__sysrw > /dev/null

		for apk in ${sys_apks} ${dat_apks}; do
			apk_name="$(busybox basename ${apk})"
			apk_cache="/cache/${apk_name}"

			# check if we are already zipaligned
			if ! zipalign -c 4 ${apk} ; then
				busybox echo -n "${apk} - ZipAligning ... "

				# nope, time to zipalign
				zipalign -f 4 "${apk}" "${apk_cache}"

				# check if file exists
				if busybox [ -e "${apk_cache}" ] ; then
					busybox cp -f "${apk_cache}" "${apk}"
					busybox rm "${apk_cache}"

					busybox echo "done";
				else
					busybox echo "ERROR";
				fi
			else
				busybox echo "${apk} - Already ZipAligned. Skipping"
			fi
		done

		__sysro > /dev/null
	fi
}

function __zipalign_apks_help () {
	busybox echo "Usage:"
	busybox echo "    zipalign_apks"
	busybox echo ""
	busybox echo "Automagickally zipaligns all of the APK files found on your system"
	busybox echo "NOTE: THIS WILL ZIPALIGN ANY APK UNDER /system OR /data"
}

function __scriptybox_help () {
	case $1 in
		adblock)
			__adblock_help
			;;
		camsounds)
			__camsounds_help
			;;
                compcache)
                        __compcache_help
                        ;;
		cpuinfo)
			__cpuinfo_help
			;;
		cwiid)
			__cwiid_help
			;;
		freemem)
			__freemem_help
			;;
		halt)
			__halt_help
			;;
		meminfo)
			__meminfo_help
			;;
		mtdinfo)
			__mtdinfo_help
			;;
		rmapk)
			__rmapk_help
			;;
		swapinfo)
			__swapinfo_help
			;;
		switchapk)
			__switchapk_help
			;;
		sysro)
			__sysro_help
			;;
		sysrw)
			__sysrw_help
			;;
		zipalign_apks)
			__zipalign_apks_help
			;;
		*)
			busybox echo "Please type a valid command to view its help information"
			;;
	esac
}

# ensure we are getting an argument
if busybox [ ! -z "${ARG}" ] ; then
	# if we are calling the script directly, shift the args
	if busybox [ "$(busybox basename $0)" == "${SCRIPT_NAME}" ] ; then
		# oh noes! direct scripting! time to shift and reset
		CMD=$1;	shift 1
		ARG=$@
	fi
fi

case ${CMD} in
	adblock) # done
		__adblock ${ARG}
		;;
	camsounds) # done
		__camsounds ${ARG}
		;;
        compcache)
                __compcache ${ARG}
                ;;
	cpuinfo) # done
		__cpuinfo ${ARG}
		;;
	cwiid) # done
		__cwiid ${ARG}
		;;
	freemem) # done
		__freemem ${ARG}
		;;
	halt) # done
		__halt ${ARG}
		;;
	meminfo) # done
		__meminfo ${ARG}
		;;
	mtdinfo) # done
		__mtdinfo ${ARG}
		;;
	rmapk) # done
		__rmapk ${ARG}
		;;
	swapinfo) # done
		__swapinfo ${ARG}
		;;
	switchapk)
		__switchapk ${ARG}
		;;
	sysro) # done
		__sysro ${ARG}
		;;
	sysrw) # done
		__sysrw ${ARG}
		;;
	zipalign_apks) # done
		__zipalign_apks ${ARG}
		;;
	help)
		__scriptybox_help
		;;
	*)
		busybox echo "Available commands:"
		busybox echo ""
		busybox echo "     adblock [on|off]"
		busybox echo "     camsounds [on|off]"
		busybox echo "     cpuinfo"
		busybox echo "     compcache [on|off|stats]"
		busybox echo "     cwiid [on|off|status]"
		busybox echo "     freemem [50mb|75mb|100mb|default]"
		busybox echo "     halt"
		busybox echo "     meminfo"
		busybox echo "     mtdinfo"
		busybox echo "     rmapk [alarm|browser|calc|carhome|corpcal|"
		busybox echo "            deskclock|devtools|email|genie|lwps|mms|"
		busybox echo "            mp3|music|qoffice|search|spare|speech|tips|"
		busybox echo "            vvm]" # dock
		busybox echo "     swapinfo"
		busybox echo "     switchapk [clock|launcher|music|phone]"
		busybox echo "     sysro"
		busybox echo "     sysrw"
		busybox echo "     zipalign_apks"
		busybox echo ""
		busybox echo "You can type \"scriptybox help [command]\" to see"
		busybox echo "help related to that command"
		;;
esac

busybox echo ""
busybox echo "(Android $(getprop ro.build.version.release) / $(getprop ro.modversion) [$(getprop ro.build.id)] by $(getprop ro.rommanager.developerid))"
