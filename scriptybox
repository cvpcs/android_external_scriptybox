#!/system/bin/sh
#
# The mother-load of all scripts O.O
#
# This script is designed to act similarly to busybox in how it
# can have symlinks of it made and whatnot to run the commands.
#

# name of this script
SCRIPT_NAME=scriptybox

# etc directories
SYSTEM_ETC=/system/etc
SCRIPT_ETC="${SYSTEM_ETC}/scriptybox"

# location of file downloads
FILES_URL="http://sapphire.cvpcs.org/files/$(getprop ro.build.id)"

# first assume we're using a symbolic link
CMD=$(basename $0)
ARG=$@

# ensure we are getting an argument
if busybox [ ! -z "${ARG}" ] ; then
	# if we are calling the script directly, shift the args
	if busybox [ "$(busybox basename $0)" == "${SCRIPT_NAME}" ] ; then
		# oh noes! direct scripting! time to shift and reset
		CMD=$1;	shift 1
		ARG=$@
	fi
fi

case ${CMD} in
	adblock) # done
		scriptybox sysrw

		hostfile_local="${SCRIPT_ETC}/hosts.local"
		hostfile_adblock="${SCRIPT_ETC}/hosts.adblock"

		case ${ARG} in
			on)
				busybox echo -n "Enabling ad blocking ... "
				busybox cat "${hostfile_local}" > /system/etc/hosts
				busybox cat "${hostfile_adblock}" >> /system/etc/hosts
				busybox echo "done"
				;;
			off)
				busybox echo -n "Disabling ad blocking ... "
				busybox cat "${hostfile_local}" > /system/etc/hosts
				busybox echo "done"
				;;
			*)
				busybox echo "Usage:"
				busybox echo "    adblock [on|off]"
				busybox echo ""
				busybox echo "Turns ad blocking for the system on or off"
				;;				
		esac

		scriptybox sysro
		;;
	camsounds) # done
		scriptybox sysrw

		sound_clk="/system/media/audio/ui/camera_click.ogg"
		sound_rec="/system/media/audio/ui/VideoRecord.ogg"

		case ${ARG} in
			on)
				busybox echo -n "Enabling camera audio ... "
				if busybox [ -e "${sound_clk}.bak" ] ; then busybox mv "${sound_clk}.bak" "${sound_clk}"; fi
				if busybox [ -e "${sound_rec}.bak" ] ; then busybox mv "${sound_rec}.bak" "${sound_rec}"; fi
				busybox echo "done"
				;;
			off)
				busybox echo -n "Disabling camera audio ... "
				if busybox [ -e "${sound_clk}" ] ; then busybox mv "${sound_clk}" "${sound_clk}.bak"; fi
				if busybox [ -e "${sound_rec}" ] ; then busybox mv "${sound_rec}" "${sound_rec}.bak"; fi
				busybox echo "done"
				;;
			*)
				busybox echo "Usage:"
				busybox echo "    camsounds [on|off]"
				busybox echo ""
				busybox echo "Turns the camera sounds (shutter and video cam) on or off"
				;;				
		esac

		scriptybox sysro
		;;
	cpuinfo) # done
		if busybox [ -z "${ARG}" ] ; then
			busybox cat /proc/cpuinfo
		else
			busybox echo "Usage:"
			busybox echo "    cpuinfo"
			busybox echo ""
			busybox echo "Displays all of the CPU information for the system"
		fi
		;;
	dalvikjit) # done
		scriptybox sysrw

		case ${ARG} in
			on)
				busybox echo -n "Enabling JIT compiler in Dalvik ... "
				busybox sed -r -i 's/(dalvik\.vm\.execution-mode=int:)fast/\1jit/' /system/build.prop
				busybox echo "done"
				;;
			off)
				busybox echo -n "Disabling JIT compiler in Dalvik ... "
				busybox sed -r -i 's/(dalvik\.vm\.execution-mode=int:)jit/\1fast/' /system/build.prop
				busybox echo "done"
				;;
			*)
				busybox echo "Usage:"
				busybox echo "    dalvikjit [on|off]"
				busybox echo ""
				busybox echo "Enables/disables the JIT compiler for the dalvik"
				busybox echo "virtual machine."
				;;
		esac

		busybox echo ""
		busybox echo "NOTE: REQUIRES A REBOOT TO ACTIVATE"
		busybox echo ""
		busybox echo "WARNING: THIS IS THE ECLAIR JIT COMPILER AND THEREFORE"
		busybox echo "         IS STILL SOMEWHAT UNSTABLE!  USE AT YOUR OWN"
		busybox echo "         RISK!"

		scriptybox sysro
		;;
	freemem) # done
		case ${ARG} in
			50mb)
				# 10mb,15mb,25mb,30mb,40mb,50mb
				busybox echo -n "Setting memkiller to keep 50mb of RAM free ... "
				busybox echo "2560,3840,6400,7680,10240,12800" > /sys/module/lowmemorykiller/parameters/minfree
				busybox echo "done"
				;;
			75mb)
				# 10mb,15mb,25mb,40mb,50mb,75mb
				busybox echo -n "Setting memkiller to keep 75mb of RAM free ... "
				busybox echo "2560,3840,6400,10240,12800,19200" > /sys/module/lowmemorykiller/parameters/minfree
				busybox echo "done"
				;;
			100mb)
				# 10mb,15mb,25mb,50mb,70mb,100mb
				busybox echo -n "Setting memkiller to keep 100mb of RAM free ... "
				busybox echo "2560,3840,6400,12800,12800,25600" > /sys/module/lowmemorykiller/parameters/minfree
				busybox echo "done"
				;;
			default)
				# 6mb,8mb,16mb,20mb,22mb,24mb (default)
				busybox echo -n "Setting memkiller to keep 24mb of RAM free (default) ... "
				busybox echo "1536,2048,4096,5120,5632,6144" > /sys/module/lowmemorykiller/parameters/minfree
				busybox echo "done"
				;;
			*)
				busybox echo "Usage:"
				busybox echo "    freemem [50mb|75mb|100mb|default]"
				busybox echo ""
				busybox echo "Configures the system to enusre that at least a given"
				busybox echo "amount of RAM is always available"
				;;
		esac
		;;
	halt) # done
		if busybox [ -z "${ARG}" ] ; then
			busybox echo "Powering down ... "
			reboot -p
		else
			busybox echo "Usage:"
			busybox echo "    halt"
			busybox echo ""
			busybox echo "Powers off the phone"
		fi
		;;
	meminfo) # done
		if busybox [ -z "${ARG}" ] ; then
			busybox cat /proc/meminfo
		else
			busybox echo "Usage:"
			busybox echo "    meminfo"
			busybox echo ""
			busybox echo "Displays all of the memory information for the system"
		fi
		;;
	rmapk) # done
		app_name=""
		app_files=""

		case ${ARG} in
			alarm)
				app_name="Alarm Clock"
				app_files="/system/app/AlarmClock.apk"
				;;
			browser)
				app_name="Browser"
				app_files="/system/app/Browser.apk"
				;;
			calc)
				app_name="Calculator"
				app_files="/system/app/Calculator.apk"
				;;
			carhome)
				app_name="Car Home"
				app_files="/system/app/CarDock.apk"
				;;
			corpcal)
				app_name="Corporate Calendar"
				app_files="/system/app/CorpCal.apk"
				;;
			deskclock)
				app_name="Desk Clock"
				app_files="/system/app/DeskClock.apk"
				;;
			devtools)
				app_name="Dev Tools"
				app_files="/system/app/Development.apk"
				;;
			#dock)
			#	app_name="Dock"
			#	app_files="/system/app/Dock.apk"
			#	;;
			email)
				app_name="Email"
				app_files="/system/app/Email.apk"
				;;
			genie)
				app_name="News and Weather"
				app_files="/system/app/GenieWidget.apk"
				;;
			#im)
			#	app_name="IM"
			#	app_files="/system/app/IM.apk"
			#	;;
			lwps)
				app_name="Live Wallpapers"
				app_files="/system/app/LiveWallpapers.apk /system/app/MagicSmokeWallpapers.apk /system/app/VisualizationWallpapers.apk"
				;;
			mms)
				app_name="MMS"
				app_files="/system/app/Mms.apk"
				;;
			mp3)
				app_name="Amazon MP3"
				app_files="/system/app/com.amazom.mp3.apk"
				;;
			music)
				app_name="Music"
				app_files="/system/app/Music.apk"
				;;
			qoffice)
				app_name="QuickOffice"
				app_files="/system/app/QuickOffice.apk"
				;;
			spare)
				app_name="Spare Parts"
				app_files="/system/app/SpareParts.apk"
				;;
			*)
				busybox echo "Usage:"
				busybox echo "     rmapk [alarm|browser|calc|carhome|corpcal|"
				busybox echo "            deskclock|devtools|email|genie|lwps|"
				busybox echo "            mms|mp3|music|qoffice|spare]" # dock, im
				busybox echo ""
				busybox echo "Removes applications that may be unwanted on some"
				busybox echo "systems.  The Applications are:"
				busybox echo "     alarm - Alarm Clock"
				busybox echo "     browser - Stock browser"
				busybox echo "     calc - Stock calculator"
				busybox echo "     carhome - Stock car home"
				busybox echo "     corpcal - Corporate Calendar"
				busybox echo "     deskclock - Desk Clock"
				busybox echo "     devtools - Development Tools"
				#busybox echo "     dock - Dock"
				busybox echo "     email - Stock email"
				busybox echo "     genie - News and Weather"
				#busybox echo "     im - Stock IM"
				busybox echo "     lwps - Live Wallpapers"
				busybox echo "     mms - Stock MMS"
				busybox echo "     mp3 - Amazon MP3"
				busybox echo "     music - Music"
				busybox echo "     qoffice - QuickOffice"
				busybox echo "     spare - Spare Parts"
				;;
		esac

		if busybox [ ! -z "${app_name}" ] ; then
			busybox echo "Removing application: ${app_name}"

			scriptybox sysrw

			for apk in ${app_files}; do
				busybox echo -n "  Removing file: ${apk} ... "

				if busybox [ -e "${apk}" ] ; then
					# i am basenaming this to make sure nothing bad happens
					busybox rm "/system/app/$(busybox basename ${apk})"
					busybox echo "done"
				else
					busybox echo "already removed"
				fi
			done

			scriptybox sysro
		fi
		;;
	swapinfo) # done
		if busybox [ -z "${ARG}" ] ; then
			busybox cat /proc/swaps
		else
			busybox echo "Usage:"
			busybox echo "    swapinfo"
			busybox echo ""
			busybox echo "Displays all of the swap information for a system"
		fi
		;;
	switchapk)
		switchapk_files_url="${FILES_URL}/switchapk"

		old_app_name=""
		old_app_file=""
		new_app_name=""
		new_app_file=""

		# find which app we're switching

		case ${ARG} in
			clock)
				if busybox [ -e /system/app/DeskClock.apk ] ; then
					old_app_name="2.1 Desk Clock"
					old_app_file="DeskClock.apk"
					new_app_name="2.0 Alarm Clock"
					new_app_file="AlarmClock.apk"
				fi
				;;
			music)
				if busybox [ -e /system/app/Music.apk ] ; then
					old_app_name="2.1 Music"
					old_app_file="Music.apk"
					new_app_name="Milestone Music"
					new_app_file="MilestoneMusic.apk"
				else
					old_app_name="Milestone Music"
					old_app_file="MilestoneMusic.apk"
					new_app_name="2.1 Music"
					new_app_file="Music.apk"
				fi
				;;
			*)
				busybox echo "Usage:"
				busybox echo "    switchapk [clock|music]"
				busybox echo ""
				busybox echo "Switches default applications for the following:"
				busybox echo "    clock - 2.1 and 2.0 clocks"
				busybox echo "    music - 2.1 and milestone music"
				;;
		esac

		if busybox [ ! -z "${new_app_name}" ] ; then
			busybox echo "Replacing ${old_app_name} with ${new_app_name} ..."

			busybox echo "  Downloading required files:"
			busybox echo -n "    ${new_app_file} ... "
			busybox wget -q -O "/cache/${new_app_file}" "${switchapk_files_url}/${new_app_file}"
			if busybox [ -e "/cache/${new_app_file}" ] ; then
				busybox echo "done"

				busybox echo -n "    ${new_app_file}.chksum ... "
				busybox wget -q -O "/cache/${new_app_file}.chksum" "${switchapk_files_url}/${new_app_file}.chksum"
				if busybox [ -e "/cache/${new_app_file}.chksum" ] ; then
					busybox echo "done"

					busybox echo "  Verifying download:"

					chksum_passed="1"

					for i in md5 sha1 sha256 sha512; do
						busybox echo -n "    Verifying ${i} checksum ... "
						if busybox [ busybox echo $(busybox grep "${i}" "/cache/${new_app_file}.chksum | busybox awk '{print $2 "  " $3}') | busybox "${i}sum" -c -s ] ; then
							busybox echo "pass"
						else
							busybox echo "FAIL"
							chksum_passed="0"
						fi
					done

					if busybox [ "$chksum_passed" -eq "1" ] ; then
						busybox echo -n "  Switching apks ... ";
						scriptybox sysrw


						if busybox [ -e "/system/app/${old_app_file}" ] ; then
							busybox rm "/system/app/${old_app_file}"
						fi

						busybox cp "/cache/${new_app_file}" "/system/app/${new_app_file}"
						busybox chown 0.0 "/system/app/${new_app_file}"
						busybox chmod 644 "/system/app/${new_app_file}"

						scriptybox sysro
						busybox echo "done"
					else
						busybox echo "  There was an error verifying your downloads"
						busybox echo "  Switch ABORTED"
					fi

					busybox echo "  Cleaning up ... "
					busybox rm "/cache/${new_app_file}"
					busybox rm "/cache/${new_app_file}.chksum"
					busybox echo "done"
				else
					busybox echo "FAILED"
				fi
			else
				busybox echo "FAILED"
			fi
		fi

		;;
	sysro) # done
		if busybox [ -z "${ARG}" ] ; then
			busybox echo -n "Remounting /system read-only ... "
			busybox mount -o remount,ro /system
			busybox echo "done"
			busybox echo -n "Syncing ... "
			sync
			busybox echo "done"
		else
			busybox echo "Usage:"
			busybox echo "    sysro"
			busybox echo ""
			busybox echo "Mounts the /system partition read-only"
		fi
		;;
	sysrw) # done
		if busybox [ -z "${ARG}" ] ; then
			busybox echo -n "Remounting /system read-write ... "
			busybox mount -o remount,rw /system
			busybox echo "done"
		else
			busybox echo "Usage:"
			busybox echo "    sysrw"
			busybox echo ""
			busybox echo "Mounts the /system partition read/write"
		fi
		;;
	zipalign_apks) # done
		if busybox [ -z "${ARG}" ] ; then
			# find our apks
			sys_apks=$(busybox find /system -name '*.apk')
			dat_apks=$(busybox find /data -name '*.apk')

			# zipalign apks
			scriptybox sysrw
			for apk in ${sys_apks} ${dat_apks}; do
				apk_name="$(busybox basename ${apk})"
				apk_cache="/cache/${apk_name}"

				# check if we are already zipaligned
				if ! zipalign -c 4 ${apk} ; then
					busybox echo -n "${apk} - ZipAligning ... "

					# nope, time to zipalign
					zipalign -f 4 "${apk}" "${apk_cache}"

					# check if file exists
					if busybox [ -e "${apk_cache}" ] ; then
						busybox cp -f "${apk_cache}" "${apk}"
						busybox rm "${apk_cache}"

						busybox echo "done";
					else
						busybox echo "ERROR";
					fi
				else
					busybox echo "${apk} - Already ZipAligned. Skipping"
				fi
			done
			scriptybox sysro
		else
			busybox echo "Usage:"
			busybox echo "    zipalign_apks"
			busybox echo ""
			busybox echo "Automagickally zipaligns all of the APK files found on your system"
			busybox echo "NOTE: THIS WILL ZIPALIGN ANY APK UNDER /system OR /data"
		fi
		;;
	*)
		busybox echo "Available commands:"
		busybox echo ""
		busybox echo "     adblock [on|off]"
		busybox echo "     camsounds [on|off]"
		busybox echo "     cpuinfo"
		busybox echo "     dalvikjit [on|off]"
		busybox echo "     freemem [50mb|75mb|100mb|default]"
		busybox echo "     halt"
		busybox echo "     meminfo"
		busybox echo "     rmapk [alarm|browser|calc|carhome|corpcal|"
		busybox echo "            deskclock|devtools|email|genie|lwps|"
		busybox echo "            mms|mp3|music|qoffice|spare]" # dock, im
		busybox echo "     swapinfo"
		busybox echo "     switchapk [clock|music]"
		busybox echo "     sysro"
		busybox echo "     sysrw"
		busybox echo "     zipalign_apks"
		;;
esac

busybox echo ""
busybox echo "(Android $(getprop ro.build.version.release) / $(getprop ro.build.display.id) [$(getprop ro.build.id)] by $(getprop ro.rommanager.developerid))"
